{"version":3,"sources":["layouts/breadcrumbs/BreadCrumbs.js","components/Message.js","components/CreationModification.js","components/ComponentCard.js","components/QuestionManagement/QuestionManagementMainDetails.js","views/EditData/QuestionManagementEdit.js","constants/creationdatetime.js","components/ComponentCardV2.js","components/Tender/AttachmentModalV2.js","components/ProjectModal/ViewFileComponentV2.js"],"names":["BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreationModification","details","title","style","fontSize","created_by","creation_date","modified_by","modification_date","ComponentCard","children","subtitle","creationModificationDate","QuestionmoreDetails","questionDetails","handleInputs","questionType","useState","question_type","question","setQuestion","category","setCategory","useEffect","api","get","then","res","data","md","onChange","value","category_id","name","map","e","category_title","target","option_1","option_2","option_3","option_4","correct_answer","defaultChecked","published","QuestionManagementEdit","setQuestionDetails","attachmentModal","setAttachmentModal","setQuestionType","questionStatus","setQuestionStatus","modelType","attachmentData","setDataForAttachment","id","useParams","navigate","useNavigate","loggedInuser","useContext","AppContext","editQuestionData","console","log","content_title","sub_category_id","creationdatetime","first_name","post","catch","question_id","ComponentCardV2","color","onClick","setTimeout","xs","AttachmentModalV2","moduleId","roomName","altTagData","desc","ViewFileComponentV2","moment","format","pStyle","textAlign","marginRight","oStyle","outline","border","quesId","fileTypes","file","setFile","handleValue","setHandleValue","uploaded","setUploaded","isOpen","multiple","handleChange","files","arrayOfObj","Object","entries","types","role","width","FormData","forEach","ele","append","onUploadProgress","filedata","Math","round","loaded","total","window","reload","updateFile","tableStyle","getFile","setGetFile","getFiles","record_id","room_name","href","rel","fileId","media_id","prevFiles","filter"],"mappings":"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","file":"static/js/71.1355b4c2.chunk.js","sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n              <span style={{ fontSize: '0.7em' }}> Creation: {details && details.created_by} {details && details.creation_date}</span>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n              <span style={{ fontSize: '0.7em' }}> Modified: {details && details.modified_by} {details && details.modification_date}</span>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React, {useEffect, useState} from 'react';\r\nimport { Row, Col, FormGroup, Label, Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport ComponentCard from '../ComponentCard';\r\nimport api from '../../constants/api';\r\n\r\nexport default function QuestionmoreDetails({\r\n  questionDetails,\r\n  handleInputs,\r\n  questionType,\r\n  }) {\r\n  QuestionmoreDetails.propTypes = {\r\n    questionDetails: PropTypes.object,\r\n    handleInputs: PropTypes.any,\r\n    questionType: PropTypes.object,\r\n      };\r\n\r\n      const [question, setQuestion] = useState(questionDetails?.question_type || '');\r\n      const [category, setCategory] = useState();\r\n      const getCategory= () => {\r\n        api.get('/questionmanagement/getCategory').then((res) => {\r\n          setCategory(res.data.data);\r\n        });\r\n      };\r\n  useEffect(() => {\r\n    if (questionDetails) {\r\n      setQuestion(questionDetails.question_type);\r\n    }\r\n    getCategory();\r\n  }, [questionDetails]);\r\n\r\n  if (!questionDetails) {\r\n    return null; // or you can return some loading indicator\r\n  }\r\n      \r\n  return (\r\n    <div>\r\n   <ComponentCard title=\"Question details\" creationModificationDate={questionDetails}>\r\n            <ToastContainer></ToastContainer>\r\n            <Row>\r\n            \r\n             \r\n              <Col md=\"3\">\r\n                <Label>Category</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  onChange={handleInputs}\r\n                  value={questionDetails && questionDetails.category_id}\r\n                  name=\"category_id\"\r\n                >\r\n                  <option value=\"selected\">Please Select</option>\r\n                  {category &&\r\n                    category.map((e) => {\r\n                      return (\r\n                        <option key={e.category_id} value={e.category_id}>\r\n                          {' '}\r\n                          {e.category_title}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </Input>\r\n              </Col>\r\n              <Col md=\"6\">\r\n                <FormGroup>\r\n                  {/* Section title from section table */}\r\n                  <Label>Question</Label>\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    name=\"question\"\r\n                    value={questionDetails && questionDetails.question}\r\n                    onChange={handleInputs}\r\n                  >\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n          \r\n\r\n              <Col md=\"3\">\r\n            <FormGroup>\r\n              <Label>Question Type</Label>\r\n              <Input\r\n                type=\"select\"\r\n                onChange={(e) => {\r\n                  handleInputs(e);\r\n                  setQuestion(e.target.value);\r\n                }}\r\n                value={question || ''}\r\n                name=\"question_type\"\r\n              >\r\n                <option value=\"\">Please Select</option>\r\n                {questionType &&\r\n                  questionType.map((e) => (\r\n                    <option key={e.value} value={e.value}>\r\n                      {e.value}\r\n                    </option>\r\n                  ))}\r\n              </Input>\r\n            </FormGroup>\r\n          </Col>\r\n\r\n          {question === 'MCQ' && (\r\n            <>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label>Option 1</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={questionDetails?.option_1 || ''}\r\n                    name=\"option_1\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>       \r\n             \r\n\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label>Option 2</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={questionDetails && questionDetails.option_2}\r\n                    name=\"option_2\"\r\n                  >\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label>Option 3</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={questionDetails && questionDetails.option_3}\r\n                    name=\"option_3\"\r\n                  >\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label>Option 4</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={questionDetails && questionDetails.option_4}\r\n                    name=\"option_4\"\r\n                  >\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              </>\r\n          )}\r\n\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Section title from section table */}\r\n                  <Label>Correct Answer</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"correct_answer\"\r\n                    value={questionDetails && questionDetails.correct_answer}\r\n                    onChange={handleInputs}\r\n                  >\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Section title from section table */}\r\n                  {/* <Label>Status</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"status\"\r\n                    value={questionDetails && questionDetails.status}\r\n                    onChange={handleInputs}\r\n                  >\r\n                    <option defaultValue=\"selected\">Please Select</option>\r\n                    {questionStatus &&\r\n                      questionStatus.map((e) => {\r\n                        return (\r\n                          <option key={e.value} value={e.value}>\r\n                            {e.value}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                  </Input> */}\r\n                  <Label>Published</Label>\r\n                  <br></br>\r\n                  <Label>Yes</Label>\r\n                  <Input\r\n                    name=\"published\"\r\n                    value=\"1\"\r\n                    type=\"radio\"\r\n                    defaultChecked={questionDetails && questionDetails.published === 1 && true}\r\n                    onChange={handleInputs}\r\n                  />\r\n                  <Label>No</Label>\r\n                  <Input\r\n                    name=\"published\"\r\n                    value=\"0\"\r\n                    type=\"radio\"\r\n                    defaultChecked={questionDetails && questionDetails.published === 0 && true}\r\n                    onChange={handleInputs}\r\n                  />\r\n\r\n                </FormGroup>\r\n              </Col>\r\n\r\n            </Row>\r\n          </ComponentCard>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useContext} from 'react';\r\nimport { Row, Col, Form, FormGroup, Button } from 'reactstrap';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport AttachmentModalV2 from '../../components/Tender/AttachmentModalV2';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport ComponentCardV2 from '../../components/ComponentCardV2';\r\nimport ViewFileComponentV2 from '../../components/ProjectModal/ViewFileComponentV2';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport QuestionManagementMainDetails from '../../components/QuestionManagement/QuestionManagementMainDetails';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\nimport AppContext from '../../context/AppContext';\r\n\r\nconst QuestionManagementEdit = () => {\r\n  // All state variables\r\n  const [questionDetails, setQuestionDetails] = useState();\r\n  const [attachmentModal, setAttachmentModal] = useState(false);\r\n  const [questionType, setQuestionType] = useState();\r\n  const [questionStatus, setQuestionStatus] = useState();\r\n  const [attachmentData, setDataForAttachment] = useState({\r\n    modelType: '',\r\n  });\r\n\r\n  // Navigation and Parameter Constants\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { loggedInuser } = useContext(AppContext);\r\n\r\n  //Setting data in questionDetails\r\n  const handleInputs = (e) => {\r\n    setQuestionDetails({ ...questionDetails, [e.target.name]: e.target.value });\r\n  };\r\n  // Get content data By content id\r\n  const getQuestionById = () => {\r\n    api\r\n      .post('/questionmanagement/getQuestionById', { question_id: id })\r\n      .then((res) => {\r\n        setQuestionDetails(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Content Data Not Found', 'info');\r\n      });\r\n  };\r\n  //Edit Content\r\n  const editQuestionData = () => {\r\n    console.log(questionDetails);\r\n    if (\r\n      questionDetails.content_title !== '' &&\r\n      questionDetails.sub_category_id !== '' &&\r\n      questionDetails.published !== ''\r\n    ) {\r\n      questionDetails.modification_date = creationdatetime;\r\n      questionDetails.modified_by = loggedInuser.first_name;\r\n      api\r\n        .post('/questionmanagement/editQuestionData', questionDetails)\r\n        .then(() => {\r\n          message('Record edited successfully', 'success');\r\n        })\r\n        .catch(() => {\r\n          message('Unable to edit record.', 'error');\r\n        });\r\n    } else {\r\n      message('Please fill all required fields', 'warning');\r\n    }\r\n  };\r\n// get data from questionType\r\n  const getQuestionTypeFromValuelist = () => {\r\n    api\r\n      .get('/questionmanagement/getQuestionTypeFromValuelist')\r\n      .then((res) => {\r\n        setQuestionType(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('questionType not found', 'info');\r\n      });\r\n  };\r\n\r\n  // get data from Question Status\r\n  const getQuestionStatusFromValuelist = () => {\r\n    api\r\n      .get('/questionmanagement/getQuestionStatusFromValuelist')\r\n      .then((res) => {\r\n        setQuestionStatus(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('questionStatus not found', 'info');\r\n      });\r\n  };\r\n\r\n\r\n  //Attachments\r\n  const dataForAttachment = () => {\r\n    setDataForAttachment({\r\n      modelType: 'attachment',\r\n    });\r\n    console.log('inside DataForAttachment');\r\n  };\r\n\r\n  useEffect(() => {\r\n    getQuestionById();\r\n    getQuestionTypeFromValuelist();\r\n    getQuestionStatusFromValuelist();\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumbs heading={questionDetails && questionDetails.title} />\r\n      <Form>\r\n        <FormGroup>\r\n          <ComponentCardV2>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editQuestionData();\r\n                    setTimeout(() => {\r\n                      navigate('/QuestionManagement');\r\n                    }, 1100);\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editQuestionData();\r\n                  }}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"dark\"\r\n                  onClick={() => {\r\n                    navigate('/QuestionManagement');\r\n                    console.log('back to list');\r\n                  }}\r\n                >\r\n                  Back to List\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </ComponentCardV2>\r\n          {/* Content Details Form */}\r\n          <QuestionManagementMainDetails\r\n            questionDetails={questionDetails}\r\n            handleInputs={handleInputs}\r\n            questionType={questionType}\r\n            questionStatus={questionStatus}\r\n          ></QuestionManagementMainDetails>\r\n\r\n        </FormGroup>\r\n      </Form>\r\n      {/* Picture and Attachments Form */}\r\n      <Form>\r\n        <FormGroup>\r\n          <ComponentCard title=\"Attachments\">\r\n            <Row>\r\n              <Col xs=\"12\" md=\"3\" className=\"mb-3\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    dataForAttachment();\r\n                    setAttachmentModal(true);\r\n                  }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <AttachmentModalV2\r\n              moduleId={id}\r\n              roomName=\"Question\"\r\n              altTagData=\"Question Data\"\r\n              desc=\"Question Data\"\r\n              modelType={attachmentData.modelType}\r\n              attachmentModal={attachmentModal}\r\n              setAttachmentModal={setAttachmentModal}\r\n            />\r\n            <ViewFileComponentV2 moduleId={id} roomName=\"Question\" />\r\n          </ComponentCard>\r\n        </FormGroup>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\nexport default QuestionManagementEdit;\r\n","import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n","import { Card, CardBody } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst pStyle = {\r\n  textAlign: 'right',\r\n  marginRight: '10px',\r\n};\r\nconst oStyle={\r\noutline:'none',\r\nborder:'none'\r\n};\r\n\r\nconst ComponentCardV2 = ({ children }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CardBody style={pStyle} >\r\n        <div className=\"btn btn-space text-nowrap shadow-none outline-none\" style={oStyle}>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCardV2.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ComponentCardV2;\r\n","import React, { useState } from 'react';\r\nimport { FormGroup, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { FileUploader } from 'react-drag-drop-files';\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\nconst AttachmentModalV2 = ({ attachmentModal, setAttachmentModal, moduleId, quesId, roomName, fileTypes, altTagData, desc }) => {\r\n\r\n  AttachmentModalV2.propTypes = {\r\n    attachmentModal: PropTypes.bool,\r\n    setAttachmentModal: PropTypes.func,\r\n    moduleId: PropTypes.string,\r\n    quesId: PropTypes.any,\r\n    roomName: PropTypes.string,\r\n    altTagData: PropTypes.string,\r\n    desc: PropTypes.string,\r\n    fileTypes: PropTypes.any,\r\n  };\r\n  \r\n  console.log('Question ID in Modal:', quesId); // Debugging line\r\n\r\n  const [file, setFile] = useState([]);\r\n  const [handleValue, setHandleValue] = useState();\r\n  const [uploaded, setUploaded] = useState(null);\r\n\r\n  const handleChange = (files) => {\r\n    const arrayOfObj = Object.entries(files).map((e) => (e[1]));\r\n\r\n    setFile(files);\r\n    setHandleValue(arrayOfObj);\r\n    console.log(files);\r\n  };\r\n\r\n  const uploadFile = () => {\r\n    if (file) {\r\n      const data = new FormData();\r\n      const arrayOfObj = Object.entries(file).map((e) => (e[1]));\r\n\r\n      arrayOfObj.forEach((ele) => {\r\n        data.append('files', ele);\r\n      });\r\n      data.append('sub_category_id', quesId);\r\n      data.append('record_id', moduleId);\r\n      data.append('room_name', roomName);\r\n      data.append('alt_tag_data', altTagData);\r\n      data.append('description', desc);\r\n\r\n      api.post('/file/uploadFiles', data, {\r\n        onUploadProgress: (filedata) => {\r\n          console.log(Math.round((filedata.loaded / filedata.total) * 100));\r\n          setUploaded(Math.round((filedata.loaded / filedata.total) * 100));\r\n        }\r\n      }).then(() => {\r\n        message('Files Uploaded Successfully', 'success');\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 400);\r\n      }).catch(() => {\r\n        setAttachmentModal(false);\r\n        message('Unable to upload File', 'error');\r\n      });\r\n    } else {\r\n      message('No files selected', 'info');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={attachmentModal}>\r\n        <ModalHeader>Upload Media</ModalHeader>\r\n        <ModalBody>\r\n          <FormGroup>\r\n            <FileUploader\r\n              multiple\r\n              handleChange={handleChange}\r\n              name=\"file\"\r\n              types={fileTypes}\r\n            />\r\n            {handleValue ? (\r\n              handleValue.map((e) => (\r\n                <div key={e.name}>\r\n                  <span>Name: {e.name}</span>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <span>No file selected</span>\r\n            )}\r\n          </FormGroup>\r\n          {uploaded && (\r\n            <div className=\"progress mt-2\">\r\n              <div className=\"progress-bar h-4\" role=\"progressbar\"\r\n                aria-valuenow={uploaded}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                style={{ width: `${uploaded}%` }}>\r\n                {`${uploaded}% uploaded`}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" className=\"shadow-none\" onClick={uploadFile}>Upload</Button>\r\n          <Button color=\"secondary\" className=\"shadow-none\" onClick={() => { window.location.reload(); setAttachmentModal(false); }}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AttachmentModalV2;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Icon from 'react-feather';\r\nimport message from '../Message';\r\nimport api from '../../constants/api';\r\n\r\nfunction ViewFileComponentV2({ moduleId, quesId,roomName,updateFile}) {\r\n  ViewFileComponentV2.propTypes = {\r\n    moduleId: PropTypes.string,\r\n    quesId: PropTypes.string,\r\n    roomName: PropTypes.string,\r\n    updateFile:PropTypes.bool,\r\n  };\r\n\r\n  const tableStyle = {};\r\n\r\n  const [getFile, setGetFile] = useState(null);\r\n\r\n  const getFiles = () => {\r\n    api\r\n      .post('/file/getListOfFiles', { record_id: moduleId,sub_category_id:quesId, room_name: roomName })\r\n      .then((res) => {\r\n        setGetFile(res.data);\r\n      })\r\n      .catch(() => {\r\n        message('Unable to fetch files', 'info');\r\n      });\r\n  };\r\n\r\n  const deleteFile = (fileId) => {\r\n     \r\n        api\r\n          .post('/file/deleteFile', { media_id: fileId })\r\n          .then(() => {\r\n            setGetFile((prevFiles) => prevFiles.filter((file) => file.media_id !== fileId));\r\n          })\r\n          .catch(() => {\r\n            message('Unable to Delete Media', 'info');\r\n          });\r\n      }\r\n      useEffect(() => {\r\n        getFiles();\r\n      }, [updateFile]); \r\n\r\n  useEffect(() => {\r\n    getFiles();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <table style={tableStyle}>\r\n        <thead>\r\n          <tr style={tableStyle}>\r\n            <th style={tableStyle}>\r\n             File Name\r\n            </th>\r\n            <th width=\"5%\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {getFile ? (\r\n          getFile.map((res) => {\r\n            return (\r\n                <tr key={res.media_id}>\r\n                  <td style={tableStyle}>\r\n                      <a\r\n                        href={`https://isodemo.unitdtechnologies.com/storage/uploads/${res.name}`}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        {res.name}\r\n                      </a>\r\n                  </td>\r\n                  <td style={tableStyle}>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn shadow-none\"\r\n                      onClick={() => {\r\n                        deleteFile(res.media_id);\r\n                      }}\r\n                    >\r\n                      <Icon.Trash2 />{' '}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <tr><td><p>no files uploaded yet</p></td></tr>\r\n        )}\r\n        </tbody>\r\n        \r\n      </table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ViewFileComponentV2;\r\n"],"sourceRoot":""}