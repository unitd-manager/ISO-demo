{"version":3,"sources":["layouts/breadcrumbs/BreadCrumbs.js","components/Message.js","components/CreationModification.js","components/ComponentCard.js","components/ScoreManage/KeyStaffDetails.js","components/ScoreManage/StaffButton.js","components/ScoreManage/Tab.js","views/EditData/BarChart.js","components/ScoreManage/CategoryChartss.js","views/EditData/ScoreManagementEdit.js","constants/creationdatetime.js","components/ComponentCardV2.js"],"names":["BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreationModification","details","title","style","fontSize","created_by","creation_date","modified_by","modification_date","ComponentCard","children","subtitle","creationModificationDate","KeyStaffDetails","staffeditdetails","handleInputs","useState","customername","setCustomerName","useEffect","api","get","then","res","data","catch","md","onChange","value","correct_count","name","disabled","comments","review_status","company_id","map","e","company_name","reviewer","StaffButton","applyChanges","backToList","editStaffData","navigate","ComponentCardV2","color","onClick","setTimeout","window","confirm","Tab","toggle","tabs","useSearchParams","searchParams","setSearchParams","id","tab","BarChart","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","answeredCount","unansweredCount","totalQuestion","correctCount","CategoryChart","categories","category","options","legend","display","StaffEdit","iso_code_id","setStaffEditDetails","scoreHistory","setScoreHistory","questions","setQuestions","selectedAnswers","setSelectedAnswers","correctAnswers","setCorrectAnswers","currentPage","setCurrentPage","useParams","useNavigate","loggedInuser","useContext","AppContext","activeTab","setActiveTab","editStaffById","post","score_management_id","console","log","fetchScoreHistory","params","transformedQuestions","question","option_1","option_2","option_3","option_4","filter","Boolean","correctAns","reduce","acc","question_id","correct_answer","previousAnswers","answer","handleCheckboxChange","questionId","option","prevAnswers","indexOfLastQuestion","indexOfFirstQuestion","currentQuestions","slice","totalPages","Math","ceil","length","paginate","pageNumber","categoryData","category_title","Object","values","calculateCategoryData","saveChanges","reload","creationdatetime","first_name","target","tabId","question_type","Array","isArray","check","checked","answersToUpdate","answersToAdd","entries","forEach","questionIdNumber","Number","existingAnswer","find","item","push","Date","updatePromises","addPromise","answers","Promise","resolve","all","keys","total_question","answered_count","unanswered_count","first","previous","number","next","last","moment","format","pStyle","textAlign","marginRight","oStyle","outline","border"],"mappings":"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","file":"static/js/64.e9bda5cb.chunk.js","sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n              <span style={{ fontSize: '0.7em' }}> Creation: {details && details.created_by} {details && details.creation_date}</span>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n              <span style={{ fontSize: '0.7em' }}> Modified: {details && details.modified_by} {details && details.modification_date}</span>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport ComponentCard from '../ComponentCard';\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\n\r\nexport default function KeyStaffDetails({\r\n  staffeditdetails,\r\n  handleInputs,\r\n\r\n}) {\r\n  KeyStaffDetails.propTypes = {\r\n    staffeditdetails: PropTypes.any,\r\n    handleInputs: PropTypes.func,\r\n  \r\n  };\r\n  const [customername, setCustomerName] = useState([]);\r\n\r\n  const getCustomerName = () => {\r\n    api\r\n      .get('/score/getCustomerName')\r\n      .then((res) => {\r\n        setCustomerName(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Company not found', 'info');\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCustomerName();\r\n \r\n  }, []);\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n      <ComponentCard\r\n            title=\"Staff Details\"\r\n            creationModificationDate={staffeditdetails}\r\n          \r\n          > \r\n          <Row>\r\n            <Col md=\"3\">\r\n              <FormGroup>\r\n                <Label>\r\n                  Score <span className=\"required\"> *</span>\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  onChange={handleInputs}\r\n                  value={staffeditdetails && staffeditdetails.correct_count}\r\n                  name=\"score\"\r\n                  disabled\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n         \r\n            <Col md=\"3\">\r\n              <FormGroup>\r\n                <Label>Comments</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  onChange={handleInputs}\r\n                  value={staffeditdetails && staffeditdetails.comments}\r\n                  name=\"comments\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md=\"3\">\r\n              <FormGroup>\r\n                <Label>Status</Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"review_status\"\r\n                  onChange={handleInputs}\r\n                  value={staffeditdetails && staffeditdetails.review_status}\r\n                >\r\n                  <option value=\"\">Please Select</option>\r\n                  <option value=\"Current\">Current</option>\r\n                  <option value=\"Archive\">Archive</option>\r\n                </Input>\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md=\"3\">\r\n              <FormGroup>\r\n                <Label>Company<span className='required'>*</span></Label>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"company_id\"\r\n                  onChange={handleInputs}\r\n                  value={staffeditdetails && staffeditdetails.company_id}\r\n                >\r\n                  <option value=\"\">Please Select</option>\r\n                  {customername &&\r\n                    customername.map((e) => {\r\n                      return (\r\n                        <option key={e.company_id} value={e.company_id}>\r\n                          {e.company_name}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                </Input>\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md=\"3\">\r\n              <FormGroup>\r\n                <Label>Reviewer</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  onChange={handleInputs}\r\n                  value={staffeditdetails && staffeditdetails.reviewer}\r\n                  name=\"reviewer\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n           \r\n            \r\n          </Row>\r\n        </ComponentCard>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Button, Form, FormGroup } from 'reactstrap';\r\nimport ComponentCardV2 from '../ComponentCardV2';\r\n\r\n\r\nexport default function StaffButton({\r\n \r\n  applyChanges,\r\n  backToList,\r\n  editStaffData,\r\n  navigate,\r\n}) {\r\n  StaffButton.propTypes = {\r\n   \r\n    applyChanges: PropTypes.func,\r\n    backToList: PropTypes.func,\r\n    editStaffData: PropTypes.func,\r\n    navigate: PropTypes.any,\r\n  };\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <ComponentCardV2>\r\n          <Row>\r\n            <Col>\r\n              <Button  className='shadow-none'\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  editStaffData();\r\n                  setTimeout(() => {\r\n                    navigate('/ScoreManagement');\r\n                  }, 1100);\r\n                }}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button  className='shadow-none'\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  editStaffData();\r\n                  applyChanges();\r\n                }}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button  className='shadow-none'\r\n                color=\"dark\"\r\n                onClick={() => {\r\n                  if (\r\n                    window.confirm(\r\n                      'Are you sure you want to cancel  \\n  \\n You will lose any changes made',\r\n                    )\r\n                  ) {\r\n                    navigate('/ScoreManagement');\r\n                  } else {\r\n                    applyChanges();\r\n                  }\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Button  className='shadow-none'\r\n                color=\"dark\"\r\n                onClick={() => {\r\n                  backToList();\r\n                }}\r\n              >\r\n                Back to List\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </ComponentCardV2>\r\n      </FormGroup>\r\n    </Form>\r\n  );\r\n}\r\n","import React,{useEffect} from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nexport default function Tab({ toggle,tabs }) {\r\n  Tab.propTypes = {\r\n    toggle: PropTypes.func,\r\n    tabs: PropTypes.array\r\n  };\r\n\r\n  // for tab refresh navigation #Renuka 31-05-23\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  useEffect(() => {\r\n   toggle(searchParams.get('tab'))\r\n  }, [searchParams.get('tab')]);\r\n  // End for tab refresh navigation #Renuka 31-05-23\r\n  return (\r\n    <Nav tabs>\r\n\r\n      {tabs?.map((e)=>{\r\n        return (\r\n          <NavItem key={e.id}>\r\n            <NavLink\r\n            key={e.id}\r\n              className={e.id === searchParams.get('tab') ? 'active' : ''}\r\n              onClick={() => {\r\n                setSearchParams({tab:e.id});\r\n                toggle(e.id);\r\n              }}\r\n            >\r\n              {e.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        )\r\n      })}\r\n    </Nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import { Bar } from 'react-chartjs-2';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nconst BarChart = ({ answeredCount, unansweredCount, totalQuestion, correctCount }) => {\r\n  const data = {\r\n    labels: ['Answered', 'Unanswered', 'Total Questions', 'Correct Answers'],\r\n    datasets: [\r\n      {\r\n        label: 'Counts',\r\n        backgroundColor: ['#36A2EB', '#FF6384', '#FFCE56', '#4CAF50'],\r\n        borderColor: 'rgba(0,0,0,0.2)',\r\n        borderWidth: 3,\r\n        hoverBackgroundColor: ['#36A2EB', '#FF6384', '#FFCE56', '#4CAF50'],\r\n        hoverBorderColor: 'rgba(0,0,0,0.2)',\r\n        data: [answeredCount, unansweredCount, totalQuestion, correctCount],\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>Score Summary</h4>\r\n      <Doughnut data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes definition\r\nBarChart.propTypes = {\r\n  answeredCount: PropTypes.number.isRequired,\r\n  unansweredCount: PropTypes.number.isRequired,\r\n  totalQuestion: PropTypes.number.isRequired,\r\n  correctCount: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategoryChart = ({ categories }) => {\r\n  const data = {\r\n    labels: categories.map(category => category.name),\r\n    datasets: [\r\n      {\r\n        label: 'Answered',\r\n        data: categories.map(category => category.answeredCount),\r\n        backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n      },\r\n      {\r\n        label: 'Correct',\r\n        data: categories.map(category => category.correctCount),\r\n        backgroundColor: 'rgba(153, 102, 255, 0.6)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    legend: {\r\n      display: true,\r\n      position: 'bottom', // You can change the position as needed\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Doughnut data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nCategoryChart.propTypes = {\r\n  categories: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      answeredCount: PropTypes.number.isRequired,\r\n      correctCount: PropTypes.number.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default CategoryChart;\r\n","import React, { useEffect, useState,useContext } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Button,\r\n  TabPane,\r\n  TabContent,\r\n  Label,\r\n  Input,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n} from 'reactstrap';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport KeyStaffDetails from '../../components/ScoreManage/KeyStaffDetails';\r\nimport StaffButton from '../../components/ScoreManage/StaffButton';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\nimport Tab from '../../components/ScoreManage/Tab';\r\nimport './StaffEdit.css'; // Custom CSS for further styling\r\nimport AppContext from '../../context/AppContext';\r\n\r\nimport BarChart from './BarChart';\r\nimport CategoryChart from '../../components/ScoreManage/CategoryChartss'; \r\n\r\nconst StaffEdit = () => {\r\n  // All state variables\r\n  const [staffeditdetails, setStaffEditDetails] = useState({company_id: '',\r\n    iso_code_id: ''});\r\n  const [scoreHistory, setScoreHistory] = useState([]);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [selectedAnswers, setSelectedAnswers] = useState({});\r\n  const [correctAnswers, setCorrectAnswers] = useState({});\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const questionsPerPage = 5;\r\n\r\n  // Navigation and Parameter Constants\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { loggedInuser } = useContext(AppContext);\r\n\r\n  const tabs = [\r\n    { id: '1', name: 'Score History' },\r\n    { id: '2', name: 'Score Summary' },\r\n    { id: '3', name: 'Category Wise Chart' },\r\n  ];\r\n  const [activeTab, setActiveTab] = useState('1');\r\n\r\n  const toggle = (tab) => {\r\n    setActiveTab(tab);\r\n  };\r\n\r\n  // Fetch Questions and Options\r\n  const fetchQuestions = () => {\r\n    api\r\n      .get('/score/getQuestions', { params: { iso_code_id: staffeditdetails && staffeditdetails.iso_code_id }})\r\n      .then((res) => {\r\n        // Transform the data to combine options into an array and store correct answers\r\n        const transformedQuestions = res.data.data.map((question) => ({\r\n          ...question,\r\n          options: [question.option_1, question.option_2, question.option_3, question.option_4].filter(Boolean)\r\n        }));\r\n        const correctAns = res.data.data.reduce((acc, question) => {\r\n          acc[question.question_id] = question.correct_answer;\r\n          return acc;\r\n        }, {});\r\n        setQuestions(transformedQuestions);\r\n        setCorrectAnswers(correctAns);\r\n      })\r\n      .catch(() => {\r\n        message('Questions not found', 'info');\r\n      });\r\n  };\r\n\r\n  // Fetch Previous Answers\r\n  const fetchPreviousAnswers = () => {\r\n    api\r\n      .post('/score/getScoreHistory', { score_management_id: id })\r\n      .then((res) => {\r\n        const previousAnswers = res.data.data.reduce((acc, answer) => {\r\n          acc[answer.question_id] = answer.answer;\r\n          return acc;\r\n        }, {});\r\n        setSelectedAnswers(previousAnswers);\r\n      })\r\n      .catch(() => {\r\n        message('Previous answers not found', 'info');\r\n      });\r\n  };\r\n\r\n  // Setting Data in Staff Details\r\n  const handleInputs = (e) => {\r\n    setStaffEditDetails({ ...staffeditdetails, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Route Change\r\n  const applyChanges = () => { };\r\n  const saveChanges = () => {\r\n    navigate('/ScoreManagement');\r\n    window.location.reload();\r\n  };\r\n  const backToList = () => {\r\n    navigate('/ScoreManagement');\r\n  };\r\n\r\n  // Api call for getting Staff Data By ID\r\n  const editStaffById = () => {\r\n    api\r\n      .post('/score/getScoreManageById', { score_management_id: id })\r\n      .then((res) => {\r\n        setStaffEditDetails(res.data.data[0]);\r\n      })\r\n      .catch(() => {\r\n        message('Staff Data Not Found', 'info');\r\n      });\r\n  };\r\n\r\n  // Api call for Editing Staff Details\r\n  const editStaffData = () => {\r\n    if (\r\n      staffeditdetails.company_id !== '' && staffeditdetails.iso_code_id !== ''\r\n    )\r\n    {\r\n    staffeditdetails.modification_date = creationdatetime;\r\n    staffeditdetails.modified_by = loggedInuser.first_name;\r\n\r\n    api\r\n      .post('/score/editScore', staffeditdetails)\r\n      .then(() => {\r\n        message('Record edited successfully', 'success');\r\n        editStaffById();\r\n      })\r\n      .catch(() => {\r\n        message('Unable to edit record.', 'error');\r\n      });\r\n    }else {\r\n      message('Please fill all required fields', 'warning');\r\n    }\r\n  };\r\n  console.log('iso',staffeditdetails.iso_code_id);\r\n  console.log('company',staffeditdetails.company_id);\r\n\r\n\r\n  // Api call for getting Score History Data\r\n  const fetchScoreHistory = () => {\r\n    api\r\n      .post('/score/getScoreHistory', { score_management_id: id })\r\n      .then((res) => {\r\n        setScoreHistory(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Score History Not Found', 'info');\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    editStaffById();\r\n    fetchScoreHistory();\r\n    fetchQuestions();\r\n    fetchPreviousAnswers();\r\n  }, [id, staffeditdetails && staffeditdetails.iso_code_id]);\r\n\r\n  // Handle Checkbox Changes\r\n  const handleCheckboxChange = (questionId, option) => {\r\n    setSelectedAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [questionId]: option,\r\n    }));\r\n  };\r\n\r\n  // Handle Text Input Changes for Objective Questions\r\n  const handleTextInputChange = (questionId, value) => {\r\n    setSelectedAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [questionId]: value,\r\n    }));\r\n  };\r\n\r\n  // Handle Form Submission\r\n  const handleSubmitAnswers = () => {\r\n    const answersToUpdate = [];\r\n    const answersToAdd = [];\r\n\r\n    Object.entries(selectedAnswers).forEach(([questionId, answer]) => {\r\n      const questionIdNumber = Number(questionId);\r\n      const existingAnswer = scoreHistory.find(item => item.question_id === questionIdNumber);\r\n\r\n      if (existingAnswer) {\r\n        if (existingAnswer.answer !== answer) {\r\n          answersToUpdate.push({\r\n            ...existingAnswer,\r\n            answer,\r\n            modification_date: new Date(),\r\n          });\r\n        }\r\n      } else {\r\n        answersToAdd.push({\r\n          score_management_id: id,\r\n          question_id: questionIdNumber,\r\n          answer,\r\n          creation_date: new Date(),\r\n        });\r\n      }\r\n    });\r\n\r\n    const updatePromises = answersToUpdate.map(answer =>\r\n      api.post('/score/editScoreHistory', answer)\r\n    );\r\n\r\n    const addPromise = answersToAdd.length > 0\r\n      ? api.post('/score/addScoreHistory', { answers: answersToAdd })\r\n      : Promise.resolve();\r\n\r\n    Promise.all([...updatePromises, addPromise])\r\n      .then(() => {\r\n        message('Answers submitted successfully', 'success');\r\n\r\n        // Count answered, unanswered, and correct questions\r\n        const answeredCount = Object.keys(selectedAnswers).length;\r\n        const unansweredCount = questions.length - answeredCount;\r\n        const correctCount = Object.entries(selectedAnswers).reduce((acc, [questionId, answer]) => {\r\n          if (correctAnswers[questionId] === answer) {\r\n            acc++;\r\n          }\r\n          return acc;\r\n        }, 0);\r\n\r\n        // Update the main table with these counts\r\n        return api.post('/score/updateAnswerCounts', {\r\n          score_management_id: id,\r\n          iso_code_id: staffeditdetails && staffeditdetails.iso_code_id,\r\n          total_question: questions.length,\r\n          answered_count: answeredCount,\r\n          unanswered_count: unansweredCount,\r\n          correct_count: correctCount\r\n        });\r\n      })\r\n      .then(() => {\r\n        fetchScoreHistory();\r\n      })\r\n      .catch(() => {\r\n        message('Unable to submit answers.', 'error');\r\n      });\r\n  };\r\n\r\n  // Pagination Helpers\r\n  const indexOfLastQuestion = currentPage * questionsPerPage;\r\n  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage;\r\n  const currentQuestions = questions.slice(indexOfFirstQuestion, indexOfLastQuestion);\r\n  const totalPages = Math.ceil(questions.length / questionsPerPage);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  const calculateCategoryData = () => {\r\n    const categoryData = questions.reduce((acc, question) => {\r\n      const category = question.category_title;\r\n      if (!acc[category]) {\r\n        acc[category] = { name: category, answeredCount: 0, correctCount: 0 };\r\n      }\r\n      acc[category].answeredCount += selectedAnswers[question.question_id] ? 1 : 0;\r\n      acc[category].correctCount += correctAnswers[question.question_id] === selectedAnswers[question.question_id] ? 1 : 0;\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.values(categoryData);\r\n  };\r\n\r\n  const categories = calculateCategoryData();\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumbs />\r\n      <ToastContainer />\r\n\r\n      <StaffButton\r\n        navigate={navigate}\r\n        saveChanges={saveChanges}\r\n        applyChanges={applyChanges}\r\n        backToList={backToList}\r\n        editStaffData={editStaffData}\r\n        id={id}\r\n      />\r\n\r\n      <BreadCrumbs heading={staffeditdetails && staffeditdetails.score_management_id} />\r\n      <KeyStaffDetails\r\n        staffeditdetails={staffeditdetails}\r\n        handleInputs={handleInputs}\r\n      />\r\n\r\n      <Form>\r\n        <FormGroup>\r\n          <ComponentCard title=\"More Details\">\r\n            <ToastContainer />\r\n            <Tab toggle={toggle} tabs={tabs} />\r\n\r\n            <TabContent className=\"p-4\" activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                {currentQuestions.map((question) => (\r\n                  <Card key={question.question_id} className=\"mb-3\">\r\n                    <CardBody>\r\n                      <CardTitle tag=\"h5\">{question.question}</CardTitle>\r\n                      <CardText>\r\n                        {question.question_type === 'MCQ' && Array.isArray(question.options) && question.options.length > 0 && (\r\n                          question.options.map((option) => (\r\n                            <FormGroup check key={option}>\r\n                              <Label check>\r\n                                <Input\r\n                                  type=\"checkbox\"\r\n                                  checked={selectedAnswers[question.question_id] === option}\r\n                                  onChange={() => handleCheckboxChange(question.question_id, option)}\r\n                                />\r\n                                {option}\r\n                              </Label>\r\n                            </FormGroup>\r\n                          ))\r\n                        )}\r\n                        {question.question_type === 'Yes/No' && (\r\n                          <div>\r\n                            <FormGroup check>\r\n                              <Label check>\r\n                                <Input\r\n                                  type=\"radio\"\r\n                                  checked={selectedAnswers[question.question_id] === 'Yes'}\r\n                                  onChange={() => handleCheckboxChange(question.question_id, 'Yes')}\r\n                                />\r\n                                Yes\r\n                              </Label>\r\n                            </FormGroup>\r\n                            <FormGroup check>\r\n                              <Label check>\r\n                                <Input\r\n                                  type=\"radio\"\r\n                                  checked={selectedAnswers[question.question_id] === 'No'}\r\n                                  onChange={() => handleCheckboxChange(question.question_id, 'No')}\r\n                                />\r\n                                No\r\n                              </Label>\r\n                            </FormGroup>\r\n                          </div>\r\n                        )} \r\n                        {question.question_type === 'Objective' && (\r\n                          <FormGroup>\r\n                            <Input\r\n                              type=\"text\"\r\n                              value={selectedAnswers[question.question_id] || ''}\r\n                              onChange={(e) => handleTextInputChange(question.question_id, e.target.value)}\r\n                            />\r\n                          </FormGroup>\r\n                        )}\r\n                      </CardText>\r\n                    </CardBody>\r\n                  </Card>\r\n                ))}\r\n                <Button color=\"primary\" onClick={handleSubmitAnswers}>\r\n                  Submit Answers\r\n                </Button>\r\n                <Pagination aria-label=\"Page navigation example\" className=\"mt-4\">\r\n                  <PaginationItem disabled={currentPage === 1}>\r\n                    <PaginationLink first onClick={() => paginate(1)} />\r\n                  </PaginationItem>\r\n                  <PaginationItem disabled={currentPage === 1}>\r\n                    <PaginationLink previous onClick={() => paginate(currentPage - 1)} />\r\n                  </PaginationItem>\r\n                  {[...Array(totalPages).keys()].map(number => (\r\n                    <PaginationItem active={currentPage === number + 1} key={number + 1}>\r\n                      <PaginationLink onClick={() => paginate(number + 1)}>\r\n                        {number + 1}\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                  ))}\r\n                  <PaginationItem disabled={currentPage === totalPages}>\r\n                    <PaginationLink next onClick={() => paginate(currentPage + 1)} />\r\n                  </PaginationItem>\r\n                  <PaginationItem disabled={currentPage === totalPages}>\r\n                    <PaginationLink last onClick={() => paginate(totalPages)} />\r\n                  </PaginationItem>\r\n                </Pagination>\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <BarChart\r\n                  answeredCount={scoreHistory.length}\r\n                  unansweredCount={questions.length - scoreHistory.length}\r\n                  totalQuestion={questions.length}\r\n                  correctCount={scoreHistory.filter(item => correctAnswers[item.question_id] === item.answer).length}\r\n                />\r\n              </TabPane>\r\n              <TabPane tabId=\"3\">\r\n                <CategoryChart categories={categories} />\r\n              </TabPane>\r\n            </TabContent>\r\n          </ComponentCard>\r\n        </FormGroup>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport default StaffEdit;\r\n","import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n","import { Card, CardBody } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst pStyle = {\r\n  textAlign: 'right',\r\n  marginRight: '10px',\r\n};\r\nconst oStyle={\r\noutline:'none',\r\nborder:'none'\r\n};\r\n\r\nconst ComponentCardV2 = ({ children }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CardBody style={pStyle} >\r\n        <div className=\"btn btn-space text-nowrap shadow-none outline-none\" style={oStyle}>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCardV2.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ComponentCardV2;\r\n"],"sourceRoot":""}