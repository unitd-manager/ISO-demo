{"version":3,"sources":["components/Message.js","views/smartconTables/Task.js"],"names":["message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","DashboardComments","useState","staff","setStaff","selectedItem","setSelectedItem","loggedInuser","useContext","AppContext","yesterdayNotes","setYesterdayNotes","value","setValue","checkWhichTab","index","getLastNotes","api","post","staff_id","then","res","data","status","catch","getStaff","date","moment","format","arr","obj","i","length","createKeysForTab","insertAttendance","elem","attendanceId","user","record_date","creation_date","modification_date","created_by","modified_by","attendance_id","changeNotes","e","noteType","target","notes","getPreviousNoteVal","selectedStaff","result","filter","completed_notes","in_progress_notes","useEffect","className","map","element","md","first_name","time_in","leave_time","color","size","onClick","sx","borderBottom","borderColor","onChange","event","newValue","key","handleChange","label","onFocus","onBlur","name","defaultValue","disabled"],"mappings":"8GAAA,oBAqDeA,IAlDC,SAACC,EAAIC,GACjB,MAAY,YAATA,EACOC,IAAMC,QAAQH,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,UAATX,EACMC,IAAMW,MAAMb,EAAK,CACnBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAED,SAATX,EACKC,IAAMY,KAAKd,EAAK,CAClBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAEK,YAATX,EACMC,IAAMa,QAAQf,EAAK,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,YAGRV,YAAMF,K,wNCiPVgB,UAlRW,WAExB,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCF,qBAAxC,mBAAOG,EAAP,KAAqBC,EAArB,KACQC,EAAiBC,qBAAWC,KAA5BF,aACR,EAA4CL,qBAA5C,mBAAOQ,EAAP,KAAuBC,EAAvB,KAGA,EAA0BT,mBAAS,IAAnC,mBAAOU,EAAP,KAAcC,EAAd,KAcA,SAASC,EAAcC,GACrB,OAAOH,EAAMG,GAGf,IAAMC,EAAe,WACnBC,IACGC,KAAK,gCAAiC,CACrCC,SAAUZ,EAAaY,WAExBC,MAAK,SAACC,GACmB,QAApBA,EAAIC,KAAKC,QACXZ,EAAkBU,EAAIC,KAAKA,SAG9BE,OAAM,WACLxC,YAAQ,yBAA0B,aAIlCyC,EAAW,WACfR,IACGC,KAAK,uBAAwB,CAC5BQ,KAAMC,MAASC,OAAO,gBAEvBR,MAAK,SAACC,GACLjB,EAASiB,EAAIC,KAAKA,MAjCxB,SAA0BO,GAExB,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC9BD,EAAIC,GAAK,EAEXlB,EAASiB,GA6BLG,CAAiBZ,EAAIC,KAAKA,MAC1BN,OAEDQ,OAAM,WACLxC,YAAQ,yBAA0B,aAIlCkD,EAAmB,SAACC,EAAMC,GAC9B,IAAMC,EAAO,GACbA,EAAKlB,SAAWgB,EAAKhB,SACrBkB,EAAKC,YAAcX,MAASC,OAAO,aACnCS,EAAKE,cAAgBZ,MAASC,OAAO,cACrCS,EAAKG,kBAAoBb,MAASC,OAAO,cACzCS,EAAKI,WAAaN,EAAKhB,SACvBkB,EAAKK,YAAcP,EAAKhB,SACH,KAAjBiB,IACFC,EAAKM,cAAgBP,GAEvBnB,IACGC,KAAK,+BAAgCmB,GACrCjB,MAAK,WACJpC,YAAQ,oCAAqC,WAC7CyC,OAEDD,OAAM,WACLxC,YAAQ,4BAA6B,aAIrC4D,EAAc,SAACC,EAAGC,GACC,KAAnBD,EAAEE,OAAOnC,MACX5B,YAAQ,oBAAqB,WAGzBqB,EAAasC,eAEftC,EAAa2C,MAAQH,EAAEE,OAAOnC,MAC9BP,EAAanB,KAAO4D,EAEpB7B,IACGC,KAAK,wBAAyBb,GAC9Be,MAAK,WACJJ,IACAhC,YAAQ,4BAA6B,cAEtCwC,OAAM,WACLxC,YAAQ,qBAAsB,aAGlCA,YAAQ,qBAAsB,UAI9BiE,EAAqB,SAACC,GAC1B,IAAMC,EACJzC,GACAA,EAAe0C,QAAO,SAACtB,GACrB,OAAOA,EAAIX,WAAa+B,KAG5B,OAAIC,EACKA,EAAO,GAET,CAAEH,MAAO,GAAIK,gBAAiB,GAAIC,kBAAmB,KAM9D,OAJAC,qBAAU,WACR9B,MACC,IAGD,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAM+B,UAAU,cAAhB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUA,UAAU,cAApB,SACE,cAAC,KAAD,UACGrD,GACCA,EAAMsD,KAAI,SAACC,EAAS3C,GAAW,IAAD,EAC5B,OACE,cAAC,IAAD,CAAK4C,GAAG,IAAR,SACE,eAAC,IAAD,CAEEH,UAAU,0CAFZ,UAIE,eAAC,KAAD,CAAKA,UAAU,gCAAf,UACE,cAAC,IAAD,CAAKG,GAAG,IAAR,SACE,+BACE,eAAC,KAAD,WACE,cAAC,IAAD,CAAKA,GAAG,IAAR,SACE,cAAC,IAAD,MAEF,eAAC,IAAD,CAAKA,GAAG,IAAR,UACE,cAAC,KAAD,UACE,4BAAID,EAAQE,eAEd,cAAC,KAAD,UACE,2DAOV,cAAC,IAAD,CAAKD,GAAG,IAAR,SACGpD,EAAaY,WAAauC,EAAQvC,WAChCuC,EAAQG,UAAYH,EAAQI,WAC3B,cAAC,IAAD,CACEC,MAAM,UACNP,UAAU,cACVQ,KAAK,KACLC,QAAS,WACP/B,EAAiBwB,EAASA,EAAQf,gBALtC,oBAUGe,EAAQG,QAYX,cAAC,IAAD,CAAQE,MAAM,UAAUP,UAAU,cAAcQ,KAAK,KAArD,oBAXA,cAAC,IAAD,CACED,MAAM,UACNP,UAAU,cACVQ,KAAK,KACLC,QAAS,WACP/B,EAAiBwB,EAAS,KAL9B,yBAiBR,uBAEA,sBAAKF,UAAU,gCAAf,UACE,yCACU,qCAAQE,EAAQG,QAAUH,EAAQG,QAAU,MAAW,OAEjE,0CACW,qCAAQH,EAAQI,WAAaJ,EAAQI,WAAa,MAAW,UAI1E,cAAC,KAAD,UACE,eAAC,IAAD,CAAYlD,MAAK,UAAEE,EAAcC,UAAhB,QAA0B,EAA3C,UACE,cAAC,IAAD,CACEmD,GAAI,CAAEC,aAAc,EAAGC,YAAa,WACpCZ,UAAU,SAFZ,SAIE,eAAC,IAAD,CACEa,SAAU,SAACC,EAAOC,GAAR,OA/LnB,SAACD,EAAOC,EAAUC,GACrC3D,EAAS,2BAAKD,GAAN,kBAAc4D,EAAMD,KA8L+BE,CAAaH,EAAOC,EAAUxD,IAC7D,aAAW,uBAFb,UAIE,cAAC,IAAD,CAAK2D,MAAM,UAAU9D,MAAO,EAAG4C,UAAU,UACzC,cAAC,IAAD,CAAKkB,MAAM,WAAW9D,MAAO,EAAG4C,UAAU,UAC1C,cAAC,IAAD,CAAKkB,MAAM,WAAW9D,MAAO,EAAG4C,UAAU,eAG9C,cAAC,IAAD,CAAU5C,MAAO,EAAjB,SACE,cAAC,IAAD,CACE+D,QAAS,WACPrE,EAAgBoD,IAGlBkB,OAAQ,SAAC/B,GACPD,EAAYC,EAAG,YAEjB3D,KAAK,WACL2F,KAAK,eACLC,aACE7B,EAAmBS,EAAQvC,WAC3B8B,EAAmBS,EAAQvC,UAAU6B,MAEvC+B,SAAUxE,EAAaY,WAAauC,EAAQvC,aAGhD,cAAC,IAAD,CAAUP,MAAO,EAAjB,SACE,cAAC,IAAD,CACE+D,QAAS,WACPrE,EAAgBoD,IAElBkB,OAAQ,SAAC/B,GACPD,EAAYC,EAAG,eAEjB3D,KAAK,WACL2F,KAAK,gBACLC,aACE7B,EAAmBS,EAAQvC,WAC3B8B,EAAmBS,EAAQvC,UAAUmC,kBAEvCyB,SAAUxE,EAAaY,WAAauC,EAAQvC,aAGhD,cAAC,IAAD,CAAUP,MAAO,EAAjB,SACE,cAAC,IAAD,CACE+D,QAAS,WACPrE,EAAgBoD,IAElBkB,OAAQ,SAAC/B,GACPD,EAAYC,EAAG,cAEjB3D,KAAK,WACL2F,KAAK,gBACLC,aACE7B,EAAmBS,EAAQvC,WAC3B8B,EAAmBS,EAAQvC,UAAUkC,gBAEvC0B,SAAUxE,EAAaY,WAAauC,EAAQvC,oBAhI/CuC,EAAQvC,WAFAuC,EAAQvC,0B","file":"static/js/124.c93d2326.chunk.js","sourcesContent":["import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Col, Row, Card, Input, Form, Button, CardBody } from 'reactstrap';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport moment from 'moment';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport AppContext from '../../context/AppContext';\r\n\r\nconst DashboardComments = () => {\r\n  // All state variables\r\n  const [staff, setStaff] = useState();\r\n  const [selectedItem, setSelectedItem] = useState();\r\n  const { loggedInuser } = useContext(AppContext);\r\n  const [yesterdayNotes, setYesterdayNotes] = useState();\r\n\r\n  // const [editTask, setEditTask] = useState();\r\n  const [value, setValue] = useState({});\r\n\r\n  const handleChange = (event, newValue, key) => {\r\n    setValue({ ...value, [key]: newValue });\r\n  };\r\n\r\n  function createKeysForTab(arr) {\r\n    const obj = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n      obj[i] = 1;\r\n    }\r\n    setValue(obj);\r\n  }\r\n\r\n  function checkWhichTab(index) {\r\n    return value[index];\r\n  }\r\n  //   Api call for getting Yesterday Notes\r\n  const getLastNotes = () => {\r\n    api\r\n      .post('/attendance/getYesterdayNotes', {\r\n        staff_id: loggedInuser.staff_id,\r\n      })\r\n      .then((res) => {\r\n        if (res.data.status === '200') {\r\n          setYesterdayNotes(res.data.data);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        message('Unable to edit record.', 'error');\r\n      });\r\n  };\r\n  //   Api call for getting Staff Data\r\n  const getStaff = () => {\r\n    api\r\n      .post('/attendance/getStaff', {\r\n        date: moment().format('DD-MM-YYYY'),\r\n      })\r\n      .then((res) => {\r\n        setStaff(res.data.data);\r\n        createKeysForTab(res.data.data);\r\n        getLastNotes();\r\n      })\r\n      .catch(() => {\r\n        message('Unable to edit record.', 'error');\r\n      });\r\n  };\r\n\r\n  const insertAttendance = (elem, attendanceId) => {\r\n    const user = {};\r\n    user.staff_id = elem.staff_id;\r\n    user.record_date = moment().format('h:mm:ss a');\r\n    user.creation_date = moment().format('DD-MM-YYYY');\r\n    user.modification_date = moment().format('DD-MM-YYYY');\r\n    user.created_by = elem.staff_id;\r\n    user.modified_by = elem.staff_id;\r\n    if (attendanceId !== '') {\r\n      user.attendance_id = attendanceId;\r\n    }\r\n    api\r\n      .post('/attendance/insertAttendance', user)\r\n      .then(() => {\r\n        message('Attendance inserted successfully.', 'success');\r\n        getStaff();\r\n      })\r\n      .catch(() => {\r\n        message('Network connection error.', 'error');\r\n      });\r\n  };\r\n\r\n  const changeNotes = (e, noteType) => {\r\n    if (e.target.value === '') {\r\n      message('Enter valid Notes', 'warning');\r\n    } else {\r\n      /* eslint-disable-next-line */\r\n      if (selectedItem.attendance_id) {\r\n        /* eslint-disable-next-line */\r\n        selectedItem.notes = e.target.value;\r\n        selectedItem.type = noteType;\r\n        /* eslint-disable-line */\r\n        api\r\n          .post('/attendance/editNotes', selectedItem)\r\n          .then(() => {\r\n            getLastNotes();\r\n            message('Task edited successfully.', 'success');\r\n          })\r\n          .catch(() => {\r\n            message('Cannot Update Data', 'error');\r\n          });\r\n      } else {\r\n        message('Please Login first', 'error');\r\n      }\r\n    }\r\n  };\r\n  const getPreviousNoteVal = (selectedStaff) => {\r\n    const result =\r\n      yesterdayNotes &&\r\n      yesterdayNotes.filter((obj) => {\r\n        return obj.staff_id === selectedStaff;\r\n      });\r\n    /* eslint-disable-next-line */\r\n    if (result) {\r\n      return result[0];\r\n    }\r\n    return { notes: '', completed_notes: '', in_progress_notes: '' };\r\n  };\r\n  useEffect(() => {\r\n    getStaff();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer></ToastContainer>\r\n      <Card className=\"shadow-none\">\r\n        <Form>\r\n          <CardBody className=\"shadow-none\">\r\n            <Row>\r\n              {staff &&\r\n                staff.map((element, index) => {\r\n                  return (\r\n                    <Col md=\"4\" key={element.staff_id}>\r\n                      <Card\r\n                        key={element.staff_id}\r\n                        className=\"border border-gray shadow-none p-1 pt-2\"\r\n                      >\r\n                        <Row className=\"border-bottom border-gray p-2\">\r\n                          <Col md=\"9\">\r\n                            <span>\r\n                              <Row>\r\n                                <Col md=\"3\">\r\n                                  <Avatar />\r\n                                </Col>\r\n                                <Col md=\"9\">\r\n                                  <Row>\r\n                                    <b>{element.first_name}</b>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <span>designation</span>\r\n                                  </Row>\r\n                                </Col>\r\n                              </Row>\r\n                            </span>\r\n                          </Col>\r\n\r\n                          <Col md=\"3\">\r\n                            {loggedInuser.staff_id === element.staff_id &&\r\n                              (element.time_in && !element.leave_time ? (\r\n                                <Button\r\n                                  color=\"primary\"\r\n                                  className=\"shadow-none\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    insertAttendance(element, element.attendance_id);\r\n                                  }}\r\n                                >\r\n                                  Logout\r\n                                </Button>\r\n                              ) : !element.time_in ? (\r\n                                <Button\r\n                                  color=\"primary\"\r\n                                  className=\"shadow-none\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    insertAttendance(element, '');\r\n                                  }}\r\n                                >\r\n                                  Login\r\n                                </Button>\r\n                              ) : (\r\n                                <Button color=\"success\" className=\"shadow-none\" size=\"sm\">\r\n                                  Marked\r\n                                </Button>\r\n                              ))}\r\n                          </Col>\r\n                        </Row>\r\n                        <br></br>\r\n\r\n                        <div className=\"text-muted mb-3 card-subtitle\">\r\n                          <p>\r\n                            Time In:<code> {element.time_in ? element.time_in : ''}</code>{' '}\r\n                          </p>\r\n                          <p>\r\n                            Time Out:<code> {element.leave_time ? element.leave_time : ''}</code>{' '}\r\n                          </p>\r\n                        </div>\r\n\r\n                        <Row>\r\n                          <TabContext value={checkWhichTab(index) ?? 1}>\r\n                            <Box\r\n                              sx={{ borderBottom: 1, borderColor: 'divider' }}\r\n                              className=\"col-12\"\r\n                            >\r\n                              <TabList\r\n                                onChange={(event, newValue) => handleChange(event, newValue, index)}\r\n                                aria-label=\"lab API tabs example\"\r\n                              >\r\n                                <Tab label=\"Pending\" value={1} className=\"col-4\" />\r\n                                <Tab label=\"Progress\" value={2} className=\"col-4\" />\r\n                                <Tab label=\"Comments\" value={3} className=\"col-4\" />\r\n                              </TabList>\r\n                            </Box>\r\n                            <TabPanel value={1}>\r\n                              <Input\r\n                                onFocus={() => {\r\n                                  setSelectedItem(element);\r\n                                 \r\n                                }}\r\n                                onBlur={(e) => {\r\n                                  changeNotes(e, 'pending');\r\n                                }}\r\n                                type=\"textarea\"\r\n                                name=\"task_pending\"\r\n                                defaultValue={\r\n                                  getPreviousNoteVal(element.staff_id) &&\r\n                                  getPreviousNoteVal(element.staff_id).notes\r\n                                }\r\n                                disabled={loggedInuser.staff_id !== element.staff_id}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel value={2}>\r\n                              <Input\r\n                                onFocus={() => {\r\n                                  setSelectedItem(element);\r\n                                }}\r\n                                onBlur={(e) => {\r\n                                  changeNotes(e, 'inprogress');\r\n                                }}\r\n                                type=\"textarea\"\r\n                                name=\"task_progress\"\r\n                                defaultValue={\r\n                                  getPreviousNoteVal(element.staff_id) &&\r\n                                  getPreviousNoteVal(element.staff_id).in_progress_notes\r\n                                }\r\n                                disabled={loggedInuser.staff_id !== element.staff_id}\r\n                              />\r\n                            </TabPanel>\r\n                            <TabPanel value={3}>\r\n                              <Input\r\n                                onFocus={() => {\r\n                                  setSelectedItem(element);\r\n                                }}\r\n                                onBlur={(e) => {\r\n                                  changeNotes(e, 'completed');\r\n                                }}\r\n                                type=\"textarea\"\r\n                                name=\"task_complete\"\r\n                                defaultValue={\r\n                                  getPreviousNoteVal(element.staff_id) &&\r\n                                  getPreviousNoteVal(element.staff_id).completed_notes\r\n                                }\r\n                                disabled={loggedInuser.staff_id !== element.staff_id}\r\n                              />\r\n                            </TabPanel>\r\n                          </TabContext>\r\n                        </Row>\r\n                      </Card>\r\n                    </Col>\r\n                  );\r\n                })}\r\n            </Row>\r\n          </CardBody>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\nexport default DashboardComments;\r\n"],"sourceRoot":""}