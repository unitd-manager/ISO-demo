{"version":3,"sources":["layouts/breadcrumbs/BreadCrumbs.js","components/Message.js","views/detailTable/QuestionManagementDetails.js","components/CreationModification.js","components/ComponentCard.js","constants/creationdatetime.js"],"names":["BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","ContentDetails","useState","isocode","setIsoCode","loggedInuser","useContext","AppContext","navigate","useNavigate","questionDetails","setQuestionDetails","handleInputs","e","target","name","value","useEffect","api","get","then","res","data","md","title","onChange","iso_code_id","map","iso_code","question","color","onClick","creation_date","creationdatetime","created_by","first_name","post","insertedDataId","insertId","setTimeout","catch","CreationModification","details","style","fontSize","modified_by","modification_date","ComponentCard","children","subtitle","creationModificationDate","moment","format"],"mappings":"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","file":"static/js/98.8f818d88.chunk.js","sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React, { useState, useEffect,useContext } from 'react';\r\nimport { Row, Col, Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\nimport AppContext from '../../context/AppContext';\r\n\r\nconst ContentDetails = () => {\r\n  //All const variables\r\n//   const [category, setCategory] = useState();\r\n  const [isocode, setIsoCode] = useState();\r\n  const { loggedInuser } = useContext(AppContext);\r\n  const navigate = useNavigate();\r\n  const [questionDetails, setQuestionDetails] = useState([]);\r\n  //setting data in questionDetails\r\n  const handleInputs = (e) => {\r\n    setQuestionDetails({ ...questionDetails, [e.target.name]: e.target.value });\r\n  };\r\n  //getting data from category\r\n//   const getCategory = () => {\r\n//     api.get('/questionmanagement/getCategory').then((res) => {\r\n//       setCategory(res.data.data);\r\n//       console.log(category);\r\n//     });\r\n//   };\r\n  // Get Iso Code\r\n  const getIsoCode = () => {\r\n    api.get('/questionmanagement/getIsoCode').then((res) => {\r\n      setIsoCode(res.data.data);\r\n    });\r\n  };\r\n  //Insert Content Data\r\n  const insertQuestion = () => {\r\n    if (questionDetails.title !== '') {\r\n      questionDetails.creation_date = creationdatetime;\r\n      questionDetails.created_by = loggedInuser.first_name;\r\n      api\r\n        .post('/questionmanagement/insertQuestion', questionDetails)\r\n        .then((res) => {\r\n          const insertedDataId = res.data.data.insertId;\r\n          message('Question inserted successfully.', 'success');\r\n          setTimeout(() => {\r\n            navigate(`/QuestionManagementEdit/${insertedDataId}`);\r\n          }, 300);\r\n        })\r\n        .catch(() => {\r\n          message('Network connection error.', 'error');\r\n        });\r\n    } else {\r\n      message('Please fill all required fields.', 'error');\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // getCategory();\r\n    getIsoCode();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <BreadCrumbs />\r\n      <ToastContainer></ToastContainer>\r\n      <Row>\r\n        <Col md=\"6\">\r\n          <ComponentCard title=\"Key Details\">\r\n            <Form>\r\n              <FormGroup>\r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <Label>ISO Code</Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      onChange={handleInputs}\r\n                      value={questionDetails && questionDetails.iso_code_id}\r\n                      name=\"iso_code_id\">\r\n                      <option value=\"selected\">Please Select</option>\r\n                    {isocode &&\r\n                      isocode.map((e) => {\r\n                        return (\r\n                          <option key={e.iso_code_id} value={e.iso_code_id}>\r\n                            {' '}\r\n                            {e.iso_code}\r\n                          </option>\r\n                          );\r\n                        })}\r\n                        </Input>\r\n                  </Col>\r\n                  </Row>\r\n                  \r\n                <Row>\r\n                  <Col md=\"12\">\r\n                    <Label>Question</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      onChange={handleInputs}\r\n                      value={questionDetails && questionDetails.question}\r\n                      name=\"question\">\r\n                    </Input>\r\n                  </Col>\r\n                </Row>\r\n\r\n                {/* <Row>\r\n                  <Col md=\"12\">\r\n                    <Label>Category</Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      onChange={handleInputs}\r\n                      value={questionDetails && questionDetails.category_id}\r\n                      name=\"category_id\">\r\n                      <option value=\"selected\">Please Select</option>\r\n                    {category &&\r\n                      category.map((e) => {\r\n                        return (\r\n                          <option key={e.category_id} value={e.category_id}>\r\n                            {' '}\r\n                            {e.category_title}\r\n                          </option>\r\n                          );\r\n                        })}\r\n                        </Input>\r\n                  </Col>\r\n                </Row> */}\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Row>\r\n                  <div className=\"pt-3 mt-3 d-flex align-items-center gap-2\">\r\n                    <Button\r\n                      className=\"shadow-none\"\r\n                      color=\"primary\"\r\n                      onClick={() => {\r\n                        insertQuestion();\r\n                      }}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => {\r\n                        navigate(-1);\r\n                      }}\r\n                      type=\"button\"\r\n                      className=\"btn btn-dark shadow-none\"\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </Row>\r\n              </FormGroup>\r\n            </Form>\r\n          </ComponentCard>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\nexport default ContentDetails;\r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n              <span style={{ fontSize: '0.7em' }}> Creation: {details && details.created_by} {details && details.creation_date}</span>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n              <span style={{ fontSize: '0.7em' }}> Modified: {details && details.modified_by} {details && details.modification_date}</span>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n"],"sourceRoot":""}