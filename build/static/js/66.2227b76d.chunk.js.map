{"version":3,"sources":["layouts/breadcrumbs/BreadCrumbs.js","components/Message.js","components/CreationModification.js","components/ComponentCard.js","components/ProductTable/QusetionTab.js","views/EditData/ISOcodeEdit.js","constants/creationdatetime.js","components/ComponentCardV2.js","components/Tender/AttachmentModalV2.js","components/ProjectModal/ViewFileComponentV2.js"],"names":["BreadCrumbs","prop","location","useLocation","firstUrl","pathname","split","secondUrl","heading","to","tag","Link","className","active","message","msg","type","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","error","info","warning","CreationModification","details","title","style","fontSize","created_by","creation_date","modified_by","modification_date","ComponentCard","children","subtitle","creationModificationDate","QuestionTab","id","useState","questions","setQuestions","isoQuestions","setIsoQuestions","categories","setCategories","selectedCategory","setSelectedCategory","selectedQuestions","setSelectedQuestions","addContactModal","setAddContactModal","addContactToggle","getIsoQuestions","api","post","iso_code_id","then","res","data","catch","handleQuestionSelect","e","target","value","checked","filter","q","useEffect","get","md","color","onClick","size","isOpen","toggle","name","onChange","categoryId","params","category_id","getQuestions","map","cat","category_title","check","question_id","question","length","questionData","questionId","window","reload","striped","cell","element","i","Swal","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","setTimeout","ContentUpdate","lineItem","contentDetails","setContentDetails","categoryLinked","setCategoryLinked","attachmentModal","setAttachmentModal","modelType","attachmentData","setDataForAttachment","valuelist","setValuelist","useParams","navigate","useNavigate","loggedInuser","useContext","AppContext","activeTab","setActiveTab","handleInputs","htmlString","DOMParser","parseFromString","body","textContent","tab","editContentData","console","log","content_title","sub_category_id","published","creationdatetime","first_name","ComponentCardV2","iso_code","readOnly","selected","ele","description","status","defaultValue","version","tabs","tabId","xs","AttachmentModalV2","moduleId","roomName","altTagData","desc","ViewFileComponentV2","moment","format","pStyle","textAlign","marginRight","oStyle","outline","border","fileTypes","file","setFile","handleValue","setHandleValue","uploaded","setUploaded","multiple","handleChange","fiels","arrayOfObj","Object","entries","types","role","width","FormData","forEach","append","onUploadProgress","filedata","Math","round","loaded","total","uploadFile","tableStyle","getFile","setGetFile","record_id","room_name","href","rel","fileId","media_id"],"mappings":"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","file":"static/js/66.2227b76d.chunk.js","sourcesContent":["import { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { useLocation, Link } from 'react-router-dom';\r\n//import SidebarData from '../sidebars/sidebardata/SidebarData';\r\n\r\nconst BreadCrumbs = (prop) => {\r\n  const location = useLocation();\r\n  const firstUrl = location.pathname.split('/')[1];\r\n  const secondUrl = location.pathname.split('/')[2];\r\n  \r\n  return (\r\n    <>\r\n      {/* <h4 className=\"text-capitalize\">{secondUrl ? `${secondUrl}` : `${firstUrl}`}</h4> */}\r\n      <h4>{prop.heading}</h4>\r\n      <Breadcrumb>\r\n        <BreadcrumbItem to=\"/\" tag={Link} className=\"text-decoration-none\">\r\n          Home\r\n        </BreadcrumbItem>\r\n        {firstUrl ? <BreadcrumbItem active>{firstUrl}</BreadcrumbItem> : ''}\r\n        {secondUrl ? <BreadcrumbItem active>{secondUrl}</BreadcrumbItem> : ''}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadCrumbs;\r\n","import {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst message = (msg,type) => {\r\n    if(type === 'success'){\r\n       return toast.success(msg, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"colored\",\r\n            });\r\n    } if(type === 'error'){\r\n        return toast.error(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n     } if(type === 'info'){\r\n        return toast.info(msg, {\r\n             position: \"top-right\",\r\n             autoClose: 5000,\r\n             hideProgressBar: false,\r\n             closeOnClick: true,\r\n             pauseOnHover: true,\r\n             draggable: true,\r\n             progress: undefined,\r\n             theme: \"colored\",\r\n             });\r\n            }if(type === 'warning'){\r\n               return toast.warning(msg, {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    theme: \"colored\",\r\n                    });\r\n                   }\r\n            return toast(msg);\r\n   \r\n  \r\n}\r\nexport default message\r\n","import React from 'react';\r\nimport { CardTitle, Row, Col } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function CreationModification({ details = null, title }) {\r\n  CreationModification.propTypes = {\r\n    details: PropTypes.object,\r\n    title: PropTypes.string,\r\n  };\r\n  return (\r\n    <>\r\n      <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        <Row>\r\n          <Col>{title}</Col>\r\n          {details && (\r\n            <Col>\r\n              <Row>\r\n              <span style={{ fontSize: '0.7em' }}> Creation: {details && details.created_by} {details && details.creation_date}</span>\r\n              </Row>\r\n              <Row className=\"d-flex\">\r\n              <span style={{ fontSize: '0.7em' }}> Modified: {details && details.modified_by} {details && details.modification_date}</span>\r\n              </Row>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </CardTitle>\r\n    </>\r\n   );\r\n}","import { Card, CardBody, CardSubtitle } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\nimport CreationModification from './CreationModification';\r\n\r\nconst ComponentCard = ({ children, title, subtitle,creationModificationDate }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CreationModification details={creationModificationDate} title={title}></CreationModification>\r\n      {/* <CardTitle tag=\"h4\" className=\"border-bottom px-4 py-3 mb-0\">\r\n        {title}\r\n        <p tag='h2' className=\"float-end small fs-5\">{righttitle}</p>\r\n      </CardTitle> */}\r\n      <CardBody className=\"p-4\">\r\n        <CardSubtitle className=\"text-muted mb-3\">{subtitle || ''}</CardSubtitle>\r\n        <div>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCard.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.node,\r\n  creationModificationDate:PropTypes.any\r\n};\r\n\r\nexport default ComponentCard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Button, CardBody, Col, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row, Table\r\n} from 'reactstrap';\r\nimport Swal from 'sweetalert2';\r\nimport PropTypes from 'prop-types';\r\nimport * as Icon from 'react-feather';\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\nexport default function QuestionTab({ id }) {\r\n  QuestionTab.propTypes = {\r\n    id: PropTypes.any,\r\n  };\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isoQuestions, setIsoQuestions] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState('');\r\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\r\n  const [addContactModal, setAddContactModal] = useState(false);\r\n\r\n  const addContactToggle = () => {\r\n    setAddContactModal(!addContactModal);\r\n  };\r\n\r\n  const deleteRecord = (questionId) => {\r\n    Swal.fire({\r\n      title: `Are you sure?`,\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        api.post('/isocode/deleteISOquestion', { question_id: questionId })\r\n          .then(() => {\r\n            Swal.fire('Deleted!', 'Contact has been deleted.', 'success');\r\n            message('Record deleted successfully', 'success'); \r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 300);\r\n          })\r\n          .catch(() => {\r\n            message('Unable to delete record.', 'error');\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  const getQuestions = (categoryId) => {\r\n    api.get('/isocode/getQuestion', { params: { iso_code_id: id, category_id: categoryId } })\r\n      .then((res) => {\r\n        setQuestions(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Unable to fetch questions', 'error');\r\n      });\r\n  };\r\n\r\n  const getIsoQuestions = () => {\r\n    api.post('/isocode/getIsoQuestionById', { iso_code_id: id })\r\n      .then((res) => {\r\n        setIsoQuestions(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Content Data Not Found', 'info');\r\n      });\r\n  };\r\n\r\n  const getQuestionCategories = () => {\r\n    api.get('/questionmanagement/getCategory')\r\n      .then((res) => {\r\n        setCategories(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('Unable to fetch categories', 'error');\r\n      });\r\n  };\r\n\r\n  const insertQuestionHistory = () => {\r\n    if (selectedQuestions.length > 0) {\r\n      const questionData = selectedQuestions.map(questionId => ({\r\n        question_id: questionId,\r\n        iso_code_id: id,\r\n      }));\r\n  \r\n      api.post('/isocode/insertQuestion', { questionData })\r\n        .then(() => { \r\n          message('Client inserted successfully.', 'success');\r\n          addContactToggle();\r\n          getIsoQuestions();\r\n          // Optionally, you can reload specific data without refreshing the entire page\r\n          window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          message('Network connection error.', 'error');\r\n        });\r\n    } else {\r\n      message('Please select at least one question', 'warning');\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (e) => {\r\n    const categoryId = e.target.value;\r\n    setSelectedCategory(categoryId);\r\n    getQuestions(categoryId);\r\n  };\r\n\r\n  const handleQuestionSelect = (e) => {\r\n    const { value, checked } = e.target;\r\n    if (checked) {\r\n      setSelectedQuestions([...selectedQuestions, value]);\r\n    } else {\r\n      setSelectedQuestions(selectedQuestions.filter(q => q !== value));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getQuestionCategories();\r\n    getIsoQuestions();\r\n  }, [id]);\r\n\r\n  const columns = [\r\n    { name: 'ID' },\r\n    { name: 'Title' },\r\n    { name: 'Actions' },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <FormGroup>\r\n          <Row>\r\n            <Col md=\"3\">\r\n              <FormGroup>\r\n                <Button color=\"primary\" className=\"shadow-none\" onClick={addContactToggle}>\r\n                  Add New Question\r\n                </Button>\r\n                <Modal size=\"lg\" isOpen={addContactModal} toggle={addContactToggle}>\r\n                  <ModalHeader toggle={addContactToggle}>New Question</ModalHeader>\r\n                  <ModalBody>\r\n                    <Row>\r\n                      <Col md=\"12\">\r\n                        <CardBody>\r\n                          <Form>\r\n                            <Row>\r\n                              <Col md=\"4\">\r\n                                <FormGroup>\r\n                                  <Label>Category<span className=\"required\">*</span></Label>\r\n                                  <Input\r\n                                    type=\"select\"\r\n                                    name=\"category\"\r\n                                    onChange={handleCategoryChange}\r\n                                    value={selectedCategory}\r\n                                  >\r\n                                    <option value=\"\">Please Select</option>\r\n                                    {categories && categories.map((cat) => (\r\n                                      <option key={cat.category_id} value={cat.category_id}>\r\n                                        {cat.category_title}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Input>\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                            <Row>\r\n                              <Col md=\"12\">\r\n                                {questions && questions.map((q) => (\r\n                                  <FormGroup key={q.question_id} check>\r\n                                    <Label check>\r\n                                      <Input\r\n                                        type=\"checkbox\"\r\n                                        value={q.question_id}\r\n                                        onChange={handleQuestionSelect}\r\n                                      />{' '}\r\n                                      {q.question}\r\n                                    </Label>\r\n                                  </FormGroup>\r\n                                ))}\r\n                              </Col>\r\n                            </Row>\r\n                          </Form>\r\n                        </CardBody>\r\n                      </Col>\r\n                    </Row>\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button\r\n                      className=\"shadow-none\"\r\n                      color=\"primary\"\r\n                      onClick={insertQuestionHistory}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      className=\"shadow-none\"\r\n                      onClick={addContactToggle}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </ModalFooter>\r\n                </Modal>\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Table striped>\r\n                <thead>\r\n                  <tr>\r\n                    {columns.map((cell) => (\r\n                      <th key={cell.name}>{cell.name}</th>\r\n                    ))}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {isoQuestions && isoQuestions.map((element, i) => (\r\n                    <tr key={element.iso_code_id}>\r\n                      <td>{i + 1}</td>\r\n                      <td>{element.question}</td>\r\n                      <td>\r\n                        <Button color=\"danger\" size=\"sm\" onClick={() => deleteRecord(element.question_id)}>\r\n                          <Icon.Trash2 size={16} />\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>      \r\n        </FormGroup>\r\n      </Form>\r\n    </>\r\n  );\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Row, Col, Form, FormGroup, Button, Label, Input, NavItem, NavLink, TabPane, TabContent, Nav } from 'reactstrap';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport '../form-editor/editor.scss';\r\nimport BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';\r\nimport AttachmentModalV2 from '../../components/Tender/AttachmentModalV2';\r\nimport ComponentCard from '../../components/ComponentCard';\r\nimport ComponentCardV2 from '../../components/ComponentCardV2';\r\nimport ViewFileComponentV2 from '../../components/ProjectModal/ViewFileComponentV2';\r\nimport message from '../../components/Message';\r\nimport api from '../../constants/api';\r\nimport QuestionTab from '../../components/ProductTable/QusetionTab';\r\nimport AppContext from '../../context/AppContext';\r\nimport creationdatetime from '../../constants/creationdatetime';\r\n\r\nconst ContentUpdate = () => {\r\n  // All state variables\r\n  const [lineItem] = useState(null);\r\n  const [contentDetails, setContentDetails] = useState();\r\n  const [categoryLinked, setCategoryLinked] = useState();\r\n  const [attachmentModal, setAttachmentModal] = useState(false);\r\n  const [attachmentData, setDataForAttachment] = useState({\r\n    modelType: '',\r\n  });\r\n  const [valuelist, setValuelist] = useState();\r\n  const stripHtmlTags = (htmlString) => {\r\n    const doc = new DOMParser().parseFromString(htmlString, 'text/html');\r\n    return doc.body.textContent || '';\r\n  };\r\n  // Navigation and Parameter Constants\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const { loggedInuser } = useContext(AppContext);\r\n  const [activeTab, setActiveTab] = useState('1');\r\n  const handleInputs = (e) => {\r\n    const { name, value } = e.target;\r\n    setContentDetails({ ...contentDetails, [name]: stripHtmlTags(value) });\r\n  };\r\n\r\n  const toggle = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  // Get content data By content id\r\n  const getContentById = () => {\r\n    api\r\n      .post('/isocode/getIsoCodeById', { iso_code_id: id })\r\n      .then((res) => {\r\n        setContentDetails(res.data.data[0]);\r\n      })\r\n      .catch(() => {\r\n        message('Content Data Not Found', 'info');\r\n      });\r\n  };\r\n\r\n  //Edit Content\r\n  const editContentData = () => {\r\n    console.log(contentDetails);\r\n    if (\r\n      contentDetails.content_title !== '' &&\r\n      contentDetails.sub_category_id !== '' &&\r\n      contentDetails.published !== ''\r\n    )\r\n  \r\n    {\r\n      contentDetails.modification_date = creationdatetime;\r\n      contentDetails.modified_by = loggedInuser.first_name;\r\n      api\r\n        .post('/isocode/editISOCode', contentDetails)\r\n        .then(() => {\r\n          message('Record edited successfully', 'success');\r\n        })\r\n        .catch(() => {\r\n          message('Unable to edit record.', 'error');\r\n        });\r\n    } else {\r\n      message('Please fill all required fields', 'warning');\r\n    }\r\n  };\r\n\r\n  // getting data from Category\r\n  const getCategory = () => {\r\n    api.get('/isocode/getCategory', categoryLinked).then((res) => {\r\n      setCategoryLinked(res.data.data);\r\n    });\r\n  };\r\n  \r\n  const getValuelist = () => {\r\n    api\r\n      .get('/isocode/getISOValueList')\r\n      .then((res) => {\r\n        setValuelist(res.data.data);\r\n      })\r\n      .catch(() => {\r\n        message('valuelist not found', 'info');\r\n      });\r\n  };\r\n  //Attachments\r\n  const dataForAttachment = () => {\r\n    setDataForAttachment({\r\n      modelType: 'attachment',\r\n    });\r\n    console.log('inside DataForAttachment');\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategory();\r\n    getContentById();\r\n    getValuelist();\r\n    console.log(lineItem);\r\n  }, [id]);\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumbs heading={contentDetails && contentDetails.title} />\r\n      <Form>\r\n        <FormGroup>\r\n          <ComponentCardV2>\r\n            <Row>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editContentData();\r\n                    setTimeout(() => {\r\n                      navigate('/ISOCodes');\r\n                    }, 1100);\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    editContentData();\r\n                  }}\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button\r\n                  color=\"dark\"\r\n                  onClick={() => {\r\n                    navigate('/ISOCodes');\r\n                    console.log('back to list');\r\n                  }}\r\n                >\r\n                  Back to List\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </ComponentCardV2>\r\n          {/* Content Details Form */}\r\n          <ComponentCard title=\"ISO Details\" creationModificationDate={contentDetails}>\r\n            <ToastContainer></ToastContainer>\r\n            <Row>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> ISO Code </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.iso_code}\r\n                    name=\"iso_code\"\r\n                    readOnly\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> Title </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.title}\r\n                    name=\"title\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n             \r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  {/* Category title from Category table */}\r\n                  <Label>Category</Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    name=\"category_id\"\r\n                    value={contentDetails && contentDetails.category_id}\r\n                    onChange={handleInputs}\r\n                  >\r\n                    <option value=\"\" selected=\"selected\">\r\n                      Please Select\r\n                    </option>\r\n                    {categoryLinked &&\r\n                      categoryLinked.map((ele) => {\r\n                        return <option value={ele.category_id}>{ele.category_title}</option>;\r\n                      })}\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> Description </Label>\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    name=\"description\"\r\n                    value={contentDetails && contentDetails.description}\r\n                    onChange={handleInputs}\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> Status </Label>\r\n                  <Input\r\n                    type=\"select\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.status}\r\n                    name=\"status\"\r\n                  >\r\n                    <option defaultValue=\"selected\">Please Select</option>\r\n                    {valuelist &&\r\n                      valuelist.map((e) => {\r\n                        return (\r\n                          <option key={e.value} value={e.value}>\r\n                            {e.value}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                  </Input>\r\n                </FormGroup>\r\n              </Col>\r\n\r\n              <Col md=\"3\">\r\n                <FormGroup>\r\n                  <Label> Version </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    onChange={handleInputs}\r\n                    value={contentDetails && contentDetails.version}\r\n                    name=\"version\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n          </ComponentCard>\r\n\r\n         \r\n        </FormGroup>\r\n      </Form>\r\n      {/* Picture and Attachments Form */}\r\n      <ComponentCard>\r\n      <Form>\r\n        <FormGroup>\r\n      \r\n\r\n\r\n            <TabContent className=\"p-4\" activeTab={activeTab}>\r\n          <Row>\r\n          <Nav tabs>   \r\n          <NavItem>\r\n              <NavLink\r\n                className={activeTab === '1' ? 'active' : ''}\r\n                onClick={() => {\r\n                  toggle('1');\r\n                }}\r\n              >\r\n                Question Linked\r\n              </NavLink>\r\n            </NavItem>                \r\n            <NavItem>\r\n              <NavLink\r\n                className={activeTab === '2' ? 'active' : ''}\r\n                onClick={() => {\r\n                  toggle('2');\r\n                }}\r\n              >\r\n                Attachments\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Row>\r\n     \r\n\r\n       <TabPane tabId=\"1\">\r\n          <ComponentCard >\r\n            <QuestionTab\r\n            id={id}\r\n            ></QuestionTab>\r\n          </ComponentCard>\r\n        </TabPane>\r\n        <TabPane tabId=\"2\">\r\n        <ComponentCard title=\"Attachments\">\r\n        <Row>\r\n              <Col xs=\"12\" md=\"3\" className=\"mb-3\">\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    dataForAttachment();\r\n                    setAttachmentModal(true);\r\n                  }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <AttachmentModalV2\r\n              moduleId={id}\r\n              roomName=\"ISO\"\r\n              altTagData=\"ISO Data\"\r\n              desc=\"ISO Data\"\r\n              modelType={attachmentData.modelType}\r\n              attachmentModal={attachmentModal}\r\n              setAttachmentModal={setAttachmentModal}\r\n            />\r\n            <ViewFileComponentV2 moduleId={id} roomName=\"ISO\" />\r\n          </ComponentCard>\r\n        </TabPane>\r\n      </TabContent>\r\n    \r\n        </FormGroup>\r\n      </Form>\r\n      </ComponentCard>\r\n    </>\r\n  );\r\n};\r\nexport default ContentUpdate;\r\n","import moment from \"moment\"\r\n\r\nconst creationdatetime = moment().format('DD-MM-YYYY h:mm:ss a')\r\nexport default creationdatetime \r\n","import { Card, CardBody } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst pStyle = {\r\n  textAlign: 'right',\r\n  marginRight: '10px',\r\n};\r\nconst oStyle={\r\noutline:'none',\r\nborder:'none'\r\n};\r\n\r\nconst ComponentCardV2 = ({ children }) => {\r\n  return (\r\n    <Card className='shadow-none'>\r\n      <CardBody style={pStyle} >\r\n        <div className=\"btn btn-space text-nowrap shadow-none outline-none\" style={oStyle}>{children}</div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nComponentCardV2.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ComponentCardV2;\r\n","import React,{useState} from 'react'\r\nimport { FormGroup,Button,Modal,ModalHeader,ModalBody, ModalFooter } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport api from '../../constants/api';\r\nimport message from '../Message';\r\n\r\nconst AttachmentModalV2 = ({attachmentModal,setAttachmentModal,moduleId,roomName,fileTypes,altTagData, desc}) => {\r\n\r\n    AttachmentModalV2.propTypes = {\r\n        attachmentModal: PropTypes.bool,\r\n        setAttachmentModal: PropTypes.func,\r\n        moduleId:PropTypes.string,\r\n        roomName:PropTypes.string,\r\n        altTagData:PropTypes.string,\r\n        desc:PropTypes.string,\r\n        fileTypes:PropTypes.any,\r\n      }\r\n      \r\n        const [file, setFile] = useState([]);\r\n        const [ handleValue, setHandleValue ] = useState()\r\n       const[uploaded, setUploaded]=useState(null)\r\n\r\n        const handleChange = (fiels) => {\r\n          \r\n            const arrayOfObj = Object.entries(fiels).map((e) => ( e[1]  ));\r\n\r\n            setFile(fiels);\r\n            setHandleValue(arrayOfObj);\r\n            console.log(fiels)\r\n        };\r\n\r\n        const uploadFile = () =>{\r\n            \r\n            if(file){\r\n\r\n               // getFiles();\r\n            \r\n          \r\n                const data = new FormData() \r\n                const arrayOfObj = Object.entries(file).map((e) => (  e[1] ));\r\n\r\n                arrayOfObj.forEach((ele) => {\r\n                    data.append(`files`, ele);\r\n                  });\r\n                //data.append('file', file)\r\n                data.append('record_id', moduleId)\r\n                data.append('room_name', roomName)\r\n                data.append('alt_tag_data', altTagData)\r\n                data.append('description', desc)\r\n\r\n                api.post('/file/uploadFiles',data,{onUploadProgress:(filedata)=>{\r\n                    console.log( Math.round((filedata.loaded/filedata.total)*100))\r\n                    setUploaded( Math.round((filedata.loaded/filedata.total)*100))\r\n                   \r\n                }}).then(()=>{\r\n     \r\n                    // setAttachmentModal(false)\r\n                    message('Files Uploaded Successfully','success')\r\n                    \r\n                    setTimeout(() => {\r\n                        window.location.reload()\r\n                    }, 400);\r\n                }).catch(()=>{\r\n                    setAttachmentModal(false)\r\n                    message('Unable to upload File','error')\r\n                    // setTimeout(() => {\r\n                    //     window.location.reload()\r\n                    // }, 400);\r\n                })\r\n            }else{\r\n                message('No files selected','info')\r\n            }\r\n        }\r\n      \r\n    \r\n  return (\r\n\r\n    \r\n    <div>\r\n        \r\n        <Modal isOpen={attachmentModal} >\r\n            <ModalHeader>Upload Media</ModalHeader>\r\n            <ModalBody>\r\n                <FormGroup>\r\n                  \r\n                <FileUploader\r\n                        multiple\r\n                        handleChange={handleChange}\r\n                        name=\"file\"\r\n                        types={fileTypes}\r\n                    />\r\n                    \r\n\r\n                    {handleValue ? (\r\n                        handleValue.map((e) => (\r\n                        <div>\r\n                            <span> Name: {e.name} </span>\r\n                        </div>\r\n                        ))\r\n                    ) : (\r\n                        <span>No file selected</span>\r\n                    )}\r\n\r\n                </FormGroup>\r\n            { uploaded &&  <div className='progress mt-2'>\r\n                    <div className=\"progress-bar h-4\" role='progressbar'\r\n                    aria-valuenow={uploaded}\r\n                    aria-valuemin='0'\r\n                    aria-valuemax='100'\r\n                    style={{width:`${uploaded}%`}}>\r\n                      {`${uploaded}% uploaded`}\r\n                    </div>\r\n                </div>}\r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" className='shadow-none' onClick={()=>{\r\n                    uploadFile()\r\n                }}>Upload</Button>\r\n                <Button color=\"secondary\" className='shadow-none' onClick={()=>{ window.location.reload();setAttachmentModal(false) }}>Cancel</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AttachmentModalV2","import React, { useEffect, useState } from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport PropTypes from 'prop-types';\r\nimport * as Icon from 'react-feather';\r\nimport message from '../Message';\r\nimport api from '../../constants/api';\r\n\r\nfunction ViewFileComponentV2({ moduleId, roomName }) {\r\n  ViewFileComponentV2.propTypes = {\r\n    moduleId: PropTypes.string,\r\n    roomName: PropTypes.string,\r\n  };\r\n\r\n  const tableStyle = {};\r\n\r\n  const [getFile, setGetFile] = useState(null);\r\n\r\n  const getFiles = () => {\r\n    api.post('/file/getListOfFiles', { record_id: moduleId, room_name: roomName }).then((res) => {\r\n      setGetFile(res.data);\r\n    });\r\n  };\r\n\r\n  const deleteFile = (fileId) => {\r\n    Swal.fire({\r\n      title: `Are you sure?`,\r\n      text: \"You won't be able to revert this!\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!',\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        api\r\n          .post('/file/deleteFile', { media_id: fileId })\r\n          .then((res) => {\r\n            console.log(res);\r\n            Swal.fire('Deleted!', 'Media has been deleted.', 'success');\r\n            //setViewLineModal(false)\r\n\r\n            window.location.reload();\r\n          })\r\n          .catch(() => {\r\n            message('Unable to Delete Media', 'info');\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFiles();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <table style={tableStyle}>\r\n        <thead>\r\n          <tr style={tableStyle}>\r\n            <th style={tableStyle}>\r\n             File Name\r\n            </th>\r\n            <th width=\"5%\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {getFile ? (\r\n          getFile.map((res) => {\r\n            return (\r\n                <tr key={res.media_id}>\r\n                  <td style={tableStyle}>\r\n                      <a\r\n                        href={`http://43.228.126.245/united-ecomm-api/storage/uploads/${res.name}`}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                      >\r\n                        {res.name}\r\n                      </a>\r\n                  </td>\r\n                  <td style={tableStyle}>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn shadow-none\"\r\n                      onClick={() => {\r\n                        deleteFile(res.media_id);\r\n                      }}\r\n                    >\r\n                      <Icon.Trash2 />{' '}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <tr><td><p>no files uploaded yet</p></td></tr>\r\n        )}\r\n        </tbody>\r\n        \r\n      </table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ViewFileComponentV2;\r\n"],"sourceRoot":""}